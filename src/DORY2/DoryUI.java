package DORY2;

import java.io.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

/*
 * @author Xiao Zhou
 */
public class DoryUI extends javax.swing.JFrame {

    private String inputFileName = "";
    private String nrDB = "";
    private String workingFolder = "";
    private String speciesFileName = "";
    private DoryEngine searchEngine;

    /**
     * Creates new form DoryUI
     */
    public DoryUI() {
        initComponents();
        Log("DORY2, developed by Xiao Zhou.");
        Log("");
        Log("DORY2 is developed to identify Klarsicht/ANC-1/Syne Homology (KASH) proteins from a large protein database in FASTA format.");
        Log("");
        Log("DORY2 is an update of DORY developed in:");
        Log("Identification of unique SUN-interacting nuclear envelope proteins with diverse functions in plants. Journal of Cell Biology. 2014. vol. 205 no. 5 677-692 ");
        Log("");
        Log("IMPORTANT NOTICE: DORY2 externally calls blast+. Please make sure you have blast+ installed on your computer. It can be downloaded at ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/.");
        Log("");
        Log("IMPORTANT NOTICE: The \"Perform a final BLASTP for identified KASH candidates against nr database function\" is new and you do not need to mannually blast against each candidate group to check whether the KASH tail is conserved. However, it requires local nr database (not the FASTA format one) installed. It can be downloaded using given update_blastdb.pl script in the blast+ folder, "
                + "or mannually downloaded. Please see ftp://ftp.ncbi.nlm.nih.gov/blast/documents/blastdb.html for detail. If you use this function, please make sure you have at least 8GB memory and a fast harddrive (reading speed>50MB/s).");
        Log("");
        Log("IMPORTANT NOTICE: The input searching database MUST be in FASTA format. DORY2 does not check the format of the input database. Please make sure it is in FASTA format.");

        Log("");
        Log("---------------------------");
    }

    private void Log(String log) {
        logTa.append(log);
        logTa.append("\n");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        progressBr = new javax.swing.JProgressBar();
        RunBn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        logTa = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        KASHFilterSettingPn = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tmdFrameLengthSp = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        tmdHydrophobicThresholdSp = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        maxKASHTailLengthSp = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        minKASHTailLengthSp = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        proteinLengthFromSp = new javax.swing.JSpinner();
        OpenSpeciesNameFileBn = new javax.swing.JButton();
        checkSpeciesNamesCb = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        regexCb = new javax.swing.JComboBox();
        outputKASHCb = new javax.swing.JCheckBox();
        leftPaddingCb = new javax.swing.JCheckBox();
        queryTaxCk = new javax.swing.JCheckBox();
        queryTaxNoteLb = new javax.swing.JLabel();
        eukaryoteCheckLb = new javax.swing.JLabel();
        eukaryoteCheckCb = new javax.swing.JComboBox();
        proteinLengthToSp = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        OpenFileBn = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        eValueCutoffSp = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        Run0Rb = new javax.swing.JRadioButton();
        Run1Rb = new javax.swing.JRadioButton();
        Run2Rb = new javax.swing.JRadioButton();
        chooseNRB = new javax.swing.JButton();
        nrFinalCk = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DORY2");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        RunBn.setText("Run");
        RunBn.setEnabled(false);
        RunBn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunBnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(progressBr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RunBn, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBr, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RunBn))
                .addGap(0, 6, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Log (triple click here to clear the log text)"));
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
        });

        logTa.setEditable(false);
        logTa.setColumns(20);
        logTa.setLineWrap(true);
        logTa.setRows(5);
        logTa.setWrapStyleWord(true);
        jScrollPane2.setViewportView(logTa);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
        );

        KASHFilterSettingPn.setBorder(javax.swing.BorderFactory.createTitledBorder("KASHFilter Settings"));

        jLabel1.setText("TMD Frame Length");
        jLabel1.setToolTipText("The length of the TMD Frame");

        tmdFrameLengthSp.setModel(new javax.swing.SpinnerNumberModel(20, 15, 35, 1));

        jLabel2.setText("TMD Hydrophobic Threshold");
        jLabel2.setToolTipText("The hydrophobic threshold to consider a sequence as a TMD");

        tmdHydrophobicThresholdSp.setModel(new javax.swing.SpinnerNumberModel(32, 10, 99, 1));
        tmdHydrophobicThresholdSp.setToolTipText("");

        jLabel3.setText("Maximum KASH Tail Length");
        jLabel3.setToolTipText("The maximum length of a KASH tail");

        maxKASHTailLengthSp.setModel(new javax.swing.SpinnerNumberModel(40, 9, 80, 1));
        maxKASHTailLengthSp.setToolTipText("");

        jLabel4.setText("Minimum KASH Tail Length");
        jLabel4.setToolTipText("The minimum length of a KASH tail");

        minKASHTailLengthSp.setModel(new javax.swing.SpinnerNumberModel(9, 4, 60, 1));
        minKASHTailLengthSp.setToolTipText("");

        jLabel7.setText("Protein Length Cutoff: from");
        jLabel7.setToolTipText("The minimum protein length to count into searching");

        proteinLengthFromSp.setModel(new javax.swing.SpinnerNumberModel(100, 50, 1000, 1));

        OpenSpeciesNameFileBn.setText("Choose Species Name File (one line one name)");
        OpenSpeciesNameFileBn.setEnabled(false);
        OpenSpeciesNameFileBn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenSpeciesNameFileBnActionPerformed(evt);
            }
        });

        checkSpeciesNamesCb.setText("During KASHFilter search, keep the proteins whose protein names contain:");
        checkSpeciesNamesCb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSpeciesNamesCbActionPerformed(evt);
            }
        });

        jLabel10.setText("Regex for KASH Tail");

        regexCb.setEditable(true);
        regexCb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "\\S+[DTVAMPLIFY][VAPIL]PT\\Z", "\\S+([PATHQL]PP[QTVFILM])\\Z", "\\S+PP\\SA\\Z", "\\S+P\\S\\Z", "\\S+P\\S\\S\\Z", "\\S+\\Z" }));

        outputKASHCb.setText("Output potential KASH tail in a file during the KASHFilter search");
        outputKASHCb.setToolTipText("");
        outputKASHCb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputKASHCbActionPerformed(evt);
            }
        });

        leftPaddingCb.setEnabled(false);
        leftPaddingCb.setLabel("In the output file, left pad KASH tail to the Maximum KASH Tail Length");

        queryTaxCk.setText("Query NCBI Taxonomy Browser to filter non-eukaryotic proteins out");
        queryTaxCk.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                queryTaxCkStateChanged(evt);
            }
        });

        queryTaxNoteLb.setText("NOTE: works for nr database; may be time consuming due to slow connection");
        queryTaxNoteLb.setEnabled(false);

        eukaryoteCheckLb.setText("Being positive, server return text should contain");
        eukaryoteCheckLb.setEnabled(false);

        eukaryoteCheckCb.setEditable(true);
        eukaryoteCheckCb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ">Eukaryota<", ">Viridiplantae<", ">Opisthokonta<", ">Metazoa<", ">Fungi<" }));
        eukaryoteCheckCb.setEnabled(false);

        proteinLengthToSp.setModel(new javax.swing.SpinnerNumberModel(100000, 100, 100000, 1));

        jLabel8.setText("to");

        javax.swing.GroupLayout KASHFilterSettingPnLayout = new javax.swing.GroupLayout(KASHFilterSettingPn);
        KASHFilterSettingPn.setLayout(KASHFilterSettingPnLayout);
        KASHFilterSettingPnLayout.setHorizontalGroup(
            KASHFilterSettingPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(KASHFilterSettingPnLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(regexCb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, KASHFilterSettingPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(KASHFilterSettingPnLayout.createSequentialGroup()
                    .addContainerGap(4, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(KASHFilterSettingPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addComponent(jLabel7)
                        .addComponent(jLabel1))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(KASHFilterSettingPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(KASHFilterSettingPnLayout.createSequentialGroup()
                            .addGroup(KASHFilterSettingPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(tmdHydrophobicThresholdSp)
                                .addComponent(tmdFrameLengthSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(KASHFilterSettingPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addComponent(jLabel3))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(KASHFilterSettingPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(minKASHTailLengthSp)
                                .addComponent(maxKASHTailLengthSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addContainerGap())
                        .addGroup(KASHFilterSettingPnLayout.createSequentialGroup()
                            .addComponent(proteinLengthFromSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel8)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(proteinLengthToSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(48, 48, 48))))
                .addComponent(queryTaxCk)
                .addComponent(outputKASHCb)
                .addComponent(checkSpeciesNamesCb)
                .addGroup(KASHFilterSettingPnLayout.createSequentialGroup()
                    .addGap(21, 21, 21)
                    .addComponent(OpenSpeciesNameFileBn, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(KASHFilterSettingPnLayout.createSequentialGroup()
                    .addGap(25, 25, 25)
                    .addGroup(KASHFilterSettingPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(leftPaddingCb)
                        .addComponent(queryTaxNoteLb)))
                .addGroup(KASHFilterSettingPnLayout.createSequentialGroup()
                    .addGap(25, 25, 25)
                    .addComponent(eukaryoteCheckLb)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(eukaryoteCheckCb, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        KASHFilterSettingPnLayout.setVerticalGroup(
            KASHFilterSettingPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(KASHFilterSettingPnLayout.createSequentialGroup()
                .addGroup(KASHFilterSettingPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(KASHFilterSettingPnLayout.createSequentialGroup()
                        .addGroup(KASHFilterSettingPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(tmdFrameLengthSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(KASHFilterSettingPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(tmdHydrophobicThresholdSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(KASHFilterSettingPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(proteinLengthFromSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(proteinLengthToSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(KASHFilterSettingPnLayout.createSequentialGroup()
                        .addGroup(KASHFilterSettingPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(maxKASHTailLengthSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(KASHFilterSettingPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(minKASHTailLengthSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(KASHFilterSettingPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(regexCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkSpeciesNamesCb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OpenSpeciesNameFileBn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(outputKASHCb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(leftPaddingCb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(queryTaxCk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(queryTaxNoteLb)
                .addGap(2, 2, 2)
                .addGroup(KASHFilterSettingPnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eukaryoteCheckLb)
                    .addComponent(eukaryoteCheckCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        leftPaddingCb.getAccessibleContext().setAccessibleName("");

        OpenFileBn.setText("Open Database File");
        OpenFileBn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenFileBnActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("HomologyFilter Settings"));

        jLabel6.setText("E-value Cutoff (0.1^X) X=");
        jLabel6.setToolTipText("The cutoff of E-value to consider two sequences as homologs");

        eValueCutoffSp.setModel(new javax.swing.SpinnerNumberModel(4, 1, 10, 1));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(eValueCutoffSp, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(eValueCutoffSp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Run Settings"));

        buttonGroup1.add(Run0Rb);
        Run0Rb.setSelected(true);
        Run0Rb.setText("Run full search");
        Run0Rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Run0RbActionPerformed(evt);
            }
        });

        buttonGroup1.add(Run1Rb);
        Run1Rb.setText("Run KASHFilter only");
        Run1Rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Run1RbActionPerformed(evt);
            }
        });

        buttonGroup1.add(Run2Rb);
        Run2Rb.setText("Run HomologyFilter only");
        Run2Rb.setToolTipText("");
        Run2Rb.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                Run2RbStateChanged(evt);
            }
        });
        Run2Rb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Run2RbActionPerformed(evt);
            }
        });

        chooseNRB.setText("Choose nr Database Folder for BLASTP");
        chooseNRB.setEnabled(false);
        chooseNRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseNRBActionPerformed(evt);
            }
        });

        nrFinalCk.setText("Perform a final BLASTP for identified KASH candidates against the nr database ");
        nrFinalCk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nrFinalCkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chooseNRB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nrFinalCk)
                            .addComponent(Run1Rb)
                            .addComponent(Run0Rb)
                            .addComponent(Run2Rb))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(Run0Rb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Run1Rb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Run2Rb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(nrFinalCk)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chooseNRB))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(KASHFilterSettingPn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(OpenFileBn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(OpenFileBn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(KASHFilterSettingPn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RunBnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunBnActionPerformed
        if ("Run".equals(RunBn.getText())) {
            RunBn.setText("Cancel");
            int runType = 0;
            if (Run0Rb.isSelected()) {//Full search;
                runType = 0;
            } else if (Run1Rb.isSelected()) {//KASHFilter only;
                runType = 1;
            } else if (Run2Rb.isSelected()) {//HomologyFilter only;
                runType = 2;
            }
            try {
                searchEngine = new DoryEngine(runType,
                        (int) tmdFrameLengthSp.getValue(),
                        (int) tmdHydrophobicThresholdSp.getValue(),
                        (int) maxKASHTailLengthSp.getValue(),
                        (int) minKASHTailLengthSp.getValue(),
                        (int) proteinLengthFromSp.getValue(),
                        (int) proteinLengthToSp.getValue(),
                        inputFileName,
                        (checkSpeciesNamesCb.isSelected() ? speciesFileName : ""),
                        outputKASHCb.isSelected(),
                        leftPaddingCb.isSelected(),
                        regexCb.getSelectedItem().toString(),
                        queryTaxCk.isSelected(),
                        eukaryoteCheckCb.getSelectedItem().toString(),
                        Math.pow(10, -(Integer) eValueCutoffSp.getValue()),
                        nrFinalCk.isSelected(),
                        nrDB,
                        workingFolder,
                        logTa);

                searchEngine.addPropertyChangeListener(new PropertyChangeListener() {
                    @Override
                    public void propertyChange(PropertyChangeEvent evt) {
                        if ("progress".equals(evt.getPropertyName())) {
                            progressBr.setValue((Integer) evt.getNewValue());
                        }
                        if (searchEngine.isDone()) {
                            RunBn.setText("Run");
                        } else if (searchEngine.isCancelled()) {
                            RunBn.setText("Run");
                        }
                    }
                });

                searchEngine.execute();
            } catch (IOException ex) {
                Log("Error: " + ex.getMessage());
                Log(">>>Search did not start.");
            }
        } else {
            searchEngine.cancel(true);
        }
    }//GEN-LAST:event_RunBnActionPerformed

    private void outputKASHCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputKASHCbActionPerformed
        leftPaddingCb.setEnabled(outputKASHCb.isSelected());
    }//GEN-LAST:event_outputKASHCbActionPerformed

    private void queryTaxCkStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_queryTaxCkStateChanged
        // TODO add your handling code here:
        queryTaxNoteLb.setEnabled(queryTaxCk.isSelected());
        eukaryoteCheckLb.setEnabled(queryTaxCk.isSelected());
        eukaryoteCheckCb.setEnabled(queryTaxCk.isSelected());
    }//GEN-LAST:event_queryTaxCkStateChanged

    private void OpenSpeciesNameFileBnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenSpeciesNameFileBnActionPerformed
        final javax.swing.JFileChooser FileChooser = new javax.swing.JFileChooser();
        int returnVal = FileChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File file = FileChooser.getSelectedFile();
            Log("Species name file \"" + file.getAbsolutePath() + "\" is set");
            speciesFileName = file.getAbsolutePath();
        } else {
            speciesFileName = "";
        }
    }//GEN-LAST:event_OpenSpeciesNameFileBnActionPerformed

    private void OpenFileBnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFileBnActionPerformed
        final javax.swing.JFileChooser FileChooser = new javax.swing.JFileChooser();
        int returnVal = FileChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File file = FileChooser.getSelectedFile();
            Log("Input file \"" + file.getAbsolutePath() + "\" is set");
            inputFileName = file.getAbsolutePath();
            workingFolder = file.getParent();
        }
        RunBn.setEnabled(!inputFileName.isEmpty()
                && (((Run0Rb.isSelected() || Run2Rb.isSelected()) && !nrDB.isEmpty())
                || Run1Rb.isSelected() || !nrFinalCk.isSelected())
        );
    }//GEN-LAST:event_OpenFileBnActionPerformed

    private void checkSpeciesNamesCbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSpeciesNamesCbActionPerformed
        // TODO add your handling code here:
        OpenSpeciesNameFileBn.setEnabled(checkSpeciesNamesCb.isSelected());
    }//GEN-LAST:event_checkSpeciesNamesCbActionPerformed

    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        if (evt.getClickCount() == 3) {
            logTa.setText(null);
        }
    }//GEN-LAST:event_jPanel3MouseClicked

    private void Run2RbStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_Run2RbStateChanged
    }//GEN-LAST:event_Run2RbStateChanged

    private void chooseNRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseNRBActionPerformed
        final javax.swing.JFileChooser FileChooser = new javax.swing.JFileChooser();
        int returnVal = FileChooser.showOpenDialog(this);
        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            File file = FileChooser.getSelectedFile();
            Log("NR database file \"" + file.getAbsolutePath() + "\" is set");
            nrDB = file.getAbsolutePath();
        }
        RunBn.setEnabled(!inputFileName.isEmpty()
                && (((Run0Rb.isSelected() || Run2Rb.isSelected()) && nrFinalCk.isSelected() && !nrDB.isEmpty())
                || Run1Rb.isSelected())
        );
    }//GEN-LAST:event_chooseNRBActionPerformed

    private void nrFinalCkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nrFinalCkActionPerformed
        chooseNRB.setEnabled(nrFinalCk.isSelected());
        RunBn.setEnabled(!inputFileName.isEmpty()
                && (((Run0Rb.isSelected() || Run2Rb.isSelected()) && !nrDB.isEmpty())
                || Run1Rb.isSelected() || !nrFinalCk.isSelected())
        );
    }//GEN-LAST:event_nrFinalCkActionPerformed

    private void Run0RbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Run0RbActionPerformed
        RunBn.setEnabled(!inputFileName.isEmpty()
                && (((Run0Rb.isSelected() || Run2Rb.isSelected()) && !nrDB.isEmpty())
                || Run1Rb.isSelected() || !nrFinalCk.isSelected())
        );
    }//GEN-LAST:event_Run0RbActionPerformed

    private void Run1RbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Run1RbActionPerformed
        RunBn.setEnabled(!inputFileName.isEmpty()
                && (((Run0Rb.isSelected() || Run2Rb.isSelected()) && !nrDB.isEmpty())
                || Run1Rb.isSelected() || !nrFinalCk.isSelected())
        );
    }//GEN-LAST:event_Run1RbActionPerformed

    private void Run2RbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Run2RbActionPerformed
        RunBn.setEnabled(!inputFileName.isEmpty()
                && (((Run0Rb.isSelected() || Run2Rb.isSelected()) && !nrDB.isEmpty())
                || Run1Rb.isSelected() || !nrFinalCk.isSelected())
        );
    }//GEN-LAST:event_Run2RbActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if (searchEngine != null) {
            searchEngine.cancel(true);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line argumdb_lengthSp
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoryUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DoryUI().setVisible(true);

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel KASHFilterSettingPn;
    private javax.swing.JButton OpenFileBn;
    private javax.swing.JButton OpenSpeciesNameFileBn;
    private javax.swing.JRadioButton Run0Rb;
    private javax.swing.JRadioButton Run1Rb;
    private javax.swing.JRadioButton Run2Rb;
    private javax.swing.JButton RunBn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox checkSpeciesNamesCb;
    private javax.swing.JButton chooseNRB;
    private javax.swing.JSpinner eValueCutoffSp;
    private javax.swing.JComboBox eukaryoteCheckCb;
    private javax.swing.JLabel eukaryoteCheckLb;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox leftPaddingCb;
    private javax.swing.JTextArea logTa;
    private javax.swing.JSpinner maxKASHTailLengthSp;
    private javax.swing.JSpinner minKASHTailLengthSp;
    private javax.swing.JCheckBox nrFinalCk;
    private javax.swing.JCheckBox outputKASHCb;
    private javax.swing.JProgressBar progressBr;
    private javax.swing.JSpinner proteinLengthFromSp;
    private javax.swing.JSpinner proteinLengthToSp;
    private javax.swing.JCheckBox queryTaxCk;
    private javax.swing.JLabel queryTaxNoteLb;
    private javax.swing.JComboBox regexCb;
    private javax.swing.JSpinner tmdFrameLengthSp;
    private javax.swing.JSpinner tmdHydrophobicThresholdSp;
    // End of variables declaration//GEN-END:variables
}
